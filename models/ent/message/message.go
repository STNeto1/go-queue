// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldContentType holds the string denoting the content_type field in the database.
	FieldContentType = "content_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRetries holds the string denoting the retries field in the database.
	FieldRetries = "retries"
	// FieldMaxRetries holds the string denoting the max_retries field in the database.
	FieldMaxRetries = "max_retries"
	// FieldAvailableFrom holds the string denoting the available_from field in the database.
	FieldAvailableFrom = "available_from"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeQueue holds the string denoting the queue edge name in mutations.
	EdgeQueue = "queue"
	// Table holds the table name of the message in the database.
	Table = "messages"
	// QueueTable is the table that holds the queue relation/edge.
	QueueTable = "messages"
	// QueueInverseTable is the table name for the Queue entity.
	// It exists in this package in order to avoid circular dependency with the "queue" package.
	QueueInverseTable = "queues"
	// QueueColumn is the table column denoting the queue relation/edge.
	QueueColumn = "queue_messages"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldBody,
	FieldContentType,
	FieldStatus,
	FieldRetries,
	FieldMaxRetries,
	FieldAvailableFrom,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "messages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"queue_messages",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultRetries holds the default value on creation for the "retries" field.
	DefaultRetries uint
	// DefaultMaxRetries holds the default value on creation for the "max_retries" field.
	DefaultMaxRetries uint
	// DefaultAvailableFrom holds the default value on creation for the "available_from" field.
	DefaultAvailableFrom func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
