// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_models/ent/message"
	"_models/ent/queue"
	"_models/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QueueCreate is the builder for creating a Queue entity.
type QueueCreate struct {
	config
	mutation *QueueMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (qc *QueueCreate) SetName(s string) *QueueCreate {
	qc.mutation.SetName(s)
	return qc
}

// SetRef sets the "ref" field.
func (qc *QueueCreate) SetRef(u uuid.UUID) *QueueCreate {
	qc.mutation.SetRef(u)
	return qc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (qc *QueueCreate) SetNillableRef(u *uuid.UUID) *QueueCreate {
	if u != nil {
		qc.SetRef(*u)
	}
	return qc
}

// SetCreatedAt sets the "created_at" field.
func (qc *QueueCreate) SetCreatedAt(t time.Time) *QueueCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QueueCreate) SetNillableCreatedAt(t *time.Time) *QueueCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetID sets the "id" field.
func (qc *QueueCreate) SetID(u uuid.UUID) *QueueCreate {
	qc.mutation.SetID(u)
	return qc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (qc *QueueCreate) SetNillableID(u *uuid.UUID) *QueueCreate {
	if u != nil {
		qc.SetID(*u)
	}
	return qc
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (qc *QueueCreate) AddUserIDs(ids ...uuid.UUID) *QueueCreate {
	qc.mutation.AddUserIDs(ids...)
	return qc
}

// AddUser adds the "user" edges to the User entity.
func (qc *QueueCreate) AddUser(u ...*User) *QueueCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return qc.AddUserIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (qc *QueueCreate) AddMessageIDs(ids ...uuid.UUID) *QueueCreate {
	qc.mutation.AddMessageIDs(ids...)
	return qc
}

// AddMessages adds the "messages" edges to the Message entity.
func (qc *QueueCreate) AddMessages(m ...*Message) *QueueCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return qc.AddMessageIDs(ids...)
}

// Mutation returns the QueueMutation object of the builder.
func (qc *QueueCreate) Mutation() *QueueMutation {
	return qc.mutation
}

// Save creates the Queue in the database.
func (qc *QueueCreate) Save(ctx context.Context) (*Queue, error) {
	var (
		err  error
		node *Queue
	)
	qc.defaults()
	if len(qc.hooks) == 0 {
		if err = qc.check(); err != nil {
			return nil, err
		}
		node, err = qc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QueueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = qc.check(); err != nil {
				return nil, err
			}
			qc.mutation = mutation
			if node, err = qc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(qc.hooks) - 1; i >= 0; i-- {
			if qc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, qc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Queue)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from QueueMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QueueCreate) SaveX(ctx context.Context) *Queue {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QueueCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QueueCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QueueCreate) defaults() {
	if _, ok := qc.mutation.Ref(); !ok {
		v := queue.DefaultRef()
		qc.mutation.SetRef(v)
	}
	if _, ok := qc.mutation.CreatedAt(); !ok {
		v := queue.DefaultCreatedAt()
		qc.mutation.SetCreatedAt(v)
	}
	if _, ok := qc.mutation.ID(); !ok {
		v := queue.DefaultID()
		qc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qc *QueueCreate) check() error {
	if _, ok := qc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Queue.name"`)}
	}
	if _, ok := qc.mutation.Ref(); !ok {
		return &ValidationError{Name: "ref", err: errors.New(`ent: missing required field "Queue.ref"`)}
	}
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Queue.created_at"`)}
	}
	return nil
}

func (qc *QueueCreate) sqlSave(ctx context.Context) (*Queue, error) {
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (qc *QueueCreate) createSpec() (*Queue, *sqlgraph.CreateSpec) {
	var (
		_node = &Queue{config: qc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: queue.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: queue.FieldID,
			},
		}
	)
	if id, ok := qc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := qc.mutation.Name(); ok {
		_spec.SetField(queue.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := qc.mutation.Ref(); ok {
		_spec.SetField(queue.FieldRef, field.TypeUUID, value)
		_node.Ref = value
	}
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(queue.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := qc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queue.UserTable,
			Columns: queue.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   queue.MessagesTable,
			Columns: queue.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QueueCreateBulk is the builder for creating many Queue entities in bulk.
type QueueCreateBulk struct {
	config
	builders []*QueueCreate
}

// Save creates the Queue entities in the database.
func (qcb *QueueCreateBulk) Save(ctx context.Context) ([]*Queue, error) {
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Queue, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QueueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QueueCreateBulk) SaveX(ctx context.Context) []*Queue {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QueueCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QueueCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}
