// Code generated by ent, DO NOT EDIT.

package queuemessage

import (
	"_models/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBody), v))
	})
}

// ContentType applies equality check predicate on the "content_type" field. It's identical to ContentTypeEQ.
func ContentType(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContentType), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// MaxRetries applies equality check predicate on the "max_retries" field. It's identical to MaxRetriesEQ.
func MaxRetries(v uint) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxRetries), v))
	})
}

// AvailableFrom applies equality check predicate on the "available_from" field. It's identical to AvailableFromEQ.
func AvailableFrom(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailableFrom), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBody), v))
	})
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBody), v))
	})
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBody), v...))
	})
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBody), v...))
	})
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBody), v))
	})
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBody), v))
	})
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBody), v))
	})
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBody), v))
	})
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBody), v))
	})
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBody), v))
	})
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBody), v))
	})
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBody), v))
	})
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBody), v))
	})
}

// ContentTypeEQ applies the EQ predicate on the "content_type" field.
func ContentTypeEQ(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContentType), v))
	})
}

// ContentTypeNEQ applies the NEQ predicate on the "content_type" field.
func ContentTypeNEQ(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContentType), v))
	})
}

// ContentTypeIn applies the In predicate on the "content_type" field.
func ContentTypeIn(vs ...string) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContentType), v...))
	})
}

// ContentTypeNotIn applies the NotIn predicate on the "content_type" field.
func ContentTypeNotIn(vs ...string) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContentType), v...))
	})
}

// ContentTypeGT applies the GT predicate on the "content_type" field.
func ContentTypeGT(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContentType), v))
	})
}

// ContentTypeGTE applies the GTE predicate on the "content_type" field.
func ContentTypeGTE(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContentType), v))
	})
}

// ContentTypeLT applies the LT predicate on the "content_type" field.
func ContentTypeLT(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContentType), v))
	})
}

// ContentTypeLTE applies the LTE predicate on the "content_type" field.
func ContentTypeLTE(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContentType), v))
	})
}

// ContentTypeContains applies the Contains predicate on the "content_type" field.
func ContentTypeContains(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContentType), v))
	})
}

// ContentTypeHasPrefix applies the HasPrefix predicate on the "content_type" field.
func ContentTypeHasPrefix(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContentType), v))
	})
}

// ContentTypeHasSuffix applies the HasSuffix predicate on the "content_type" field.
func ContentTypeHasSuffix(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContentType), v))
	})
}

// ContentTypeEqualFold applies the EqualFold predicate on the "content_type" field.
func ContentTypeEqualFold(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContentType), v))
	})
}

// ContentTypeContainsFold applies the ContainsFold predicate on the "content_type" field.
func ContentTypeContainsFold(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContentType), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// MaxRetriesEQ applies the EQ predicate on the "max_retries" field.
func MaxRetriesEQ(v uint) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxRetries), v))
	})
}

// MaxRetriesNEQ applies the NEQ predicate on the "max_retries" field.
func MaxRetriesNEQ(v uint) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxRetries), v))
	})
}

// MaxRetriesIn applies the In predicate on the "max_retries" field.
func MaxRetriesIn(vs ...uint) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxRetries), v...))
	})
}

// MaxRetriesNotIn applies the NotIn predicate on the "max_retries" field.
func MaxRetriesNotIn(vs ...uint) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxRetries), v...))
	})
}

// MaxRetriesGT applies the GT predicate on the "max_retries" field.
func MaxRetriesGT(v uint) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxRetries), v))
	})
}

// MaxRetriesGTE applies the GTE predicate on the "max_retries" field.
func MaxRetriesGTE(v uint) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxRetries), v))
	})
}

// MaxRetriesLT applies the LT predicate on the "max_retries" field.
func MaxRetriesLT(v uint) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxRetries), v))
	})
}

// MaxRetriesLTE applies the LTE predicate on the "max_retries" field.
func MaxRetriesLTE(v uint) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxRetries), v))
	})
}

// AvailableFromEQ applies the EQ predicate on the "available_from" field.
func AvailableFromEQ(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailableFrom), v))
	})
}

// AvailableFromNEQ applies the NEQ predicate on the "available_from" field.
func AvailableFromNEQ(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvailableFrom), v))
	})
}

// AvailableFromIn applies the In predicate on the "available_from" field.
func AvailableFromIn(vs ...time.Time) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAvailableFrom), v...))
	})
}

// AvailableFromNotIn applies the NotIn predicate on the "available_from" field.
func AvailableFromNotIn(vs ...time.Time) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAvailableFrom), v...))
	})
}

// AvailableFromGT applies the GT predicate on the "available_from" field.
func AvailableFromGT(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvailableFrom), v))
	})
}

// AvailableFromGTE applies the GTE predicate on the "available_from" field.
func AvailableFromGTE(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvailableFrom), v))
	})
}

// AvailableFromLT applies the LT predicate on the "available_from" field.
func AvailableFromLT(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvailableFrom), v))
	})
}

// AvailableFromLTE applies the LTE predicate on the "available_from" field.
func AvailableFromLTE(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvailableFrom), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.QueueMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// HasQueue applies the HasEdge predicate on the "queue" edge.
func HasQueue() predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QueueTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, QueueTable, QueuePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQueueWith applies the HasEdge predicate on the "queue" edge with a given conditions (other predicates).
func HasQueueWith(preds ...predicate.Queue) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QueueInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, QueueTable, QueuePrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QueueMessage) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QueueMessage) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QueueMessage) predicate.QueueMessage {
	return predicate.QueueMessage(func(s *sql.Selector) {
		p(s.Not())
	})
}
