// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_models/ent/queue"
	"_models/ent/queuemessage"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QueueMessageCreate is the builder for creating a QueueMessage entity.
type QueueMessageCreate struct {
	config
	mutation *QueueMessageMutation
	hooks    []Hook
}

// SetBody sets the "body" field.
func (qmc *QueueMessageCreate) SetBody(s string) *QueueMessageCreate {
	qmc.mutation.SetBody(s)
	return qmc
}

// SetContentType sets the "content_type" field.
func (qmc *QueueMessageCreate) SetContentType(s string) *QueueMessageCreate {
	qmc.mutation.SetContentType(s)
	return qmc
}

// SetStatus sets the "status" field.
func (qmc *QueueMessageCreate) SetStatus(s string) *QueueMessageCreate {
	qmc.mutation.SetStatus(s)
	return qmc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (qmc *QueueMessageCreate) SetNillableStatus(s *string) *QueueMessageCreate {
	if s != nil {
		qmc.SetStatus(*s)
	}
	return qmc
}

// SetMaxRetries sets the "max_retries" field.
func (qmc *QueueMessageCreate) SetMaxRetries(u uint) *QueueMessageCreate {
	qmc.mutation.SetMaxRetries(u)
	return qmc
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (qmc *QueueMessageCreate) SetNillableMaxRetries(u *uint) *QueueMessageCreate {
	if u != nil {
		qmc.SetMaxRetries(*u)
	}
	return qmc
}

// SetAvailableFrom sets the "available_from" field.
func (qmc *QueueMessageCreate) SetAvailableFrom(t time.Time) *QueueMessageCreate {
	qmc.mutation.SetAvailableFrom(t)
	return qmc
}

// SetNillableAvailableFrom sets the "available_from" field if the given value is not nil.
func (qmc *QueueMessageCreate) SetNillableAvailableFrom(t *time.Time) *QueueMessageCreate {
	if t != nil {
		qmc.SetAvailableFrom(*t)
	}
	return qmc
}

// SetCreatedAt sets the "created_at" field.
func (qmc *QueueMessageCreate) SetCreatedAt(t time.Time) *QueueMessageCreate {
	qmc.mutation.SetCreatedAt(t)
	return qmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qmc *QueueMessageCreate) SetNillableCreatedAt(t *time.Time) *QueueMessageCreate {
	if t != nil {
		qmc.SetCreatedAt(*t)
	}
	return qmc
}

// SetID sets the "id" field.
func (qmc *QueueMessageCreate) SetID(u uuid.UUID) *QueueMessageCreate {
	qmc.mutation.SetID(u)
	return qmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (qmc *QueueMessageCreate) SetNillableID(u *uuid.UUID) *QueueMessageCreate {
	if u != nil {
		qmc.SetID(*u)
	}
	return qmc
}

// AddQueueIDs adds the "queue" edge to the Queue entity by IDs.
func (qmc *QueueMessageCreate) AddQueueIDs(ids ...uuid.UUID) *QueueMessageCreate {
	qmc.mutation.AddQueueIDs(ids...)
	return qmc
}

// AddQueue adds the "queue" edges to the Queue entity.
func (qmc *QueueMessageCreate) AddQueue(q ...*Queue) *QueueMessageCreate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qmc.AddQueueIDs(ids...)
}

// Mutation returns the QueueMessageMutation object of the builder.
func (qmc *QueueMessageCreate) Mutation() *QueueMessageMutation {
	return qmc.mutation
}

// Save creates the QueueMessage in the database.
func (qmc *QueueMessageCreate) Save(ctx context.Context) (*QueueMessage, error) {
	var (
		err  error
		node *QueueMessage
	)
	qmc.defaults()
	if len(qmc.hooks) == 0 {
		if err = qmc.check(); err != nil {
			return nil, err
		}
		node, err = qmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QueueMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = qmc.check(); err != nil {
				return nil, err
			}
			qmc.mutation = mutation
			if node, err = qmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(qmc.hooks) - 1; i >= 0; i-- {
			if qmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, qmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*QueueMessage)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from QueueMessageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (qmc *QueueMessageCreate) SaveX(ctx context.Context) *QueueMessage {
	v, err := qmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qmc *QueueMessageCreate) Exec(ctx context.Context) error {
	_, err := qmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qmc *QueueMessageCreate) ExecX(ctx context.Context) {
	if err := qmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qmc *QueueMessageCreate) defaults() {
	if _, ok := qmc.mutation.Status(); !ok {
		v := queuemessage.DefaultStatus
		qmc.mutation.SetStatus(v)
	}
	if _, ok := qmc.mutation.MaxRetries(); !ok {
		v := queuemessage.DefaultMaxRetries
		qmc.mutation.SetMaxRetries(v)
	}
	if _, ok := qmc.mutation.AvailableFrom(); !ok {
		v := queuemessage.DefaultAvailableFrom()
		qmc.mutation.SetAvailableFrom(v)
	}
	if _, ok := qmc.mutation.CreatedAt(); !ok {
		v := queuemessage.DefaultCreatedAt()
		qmc.mutation.SetCreatedAt(v)
	}
	if _, ok := qmc.mutation.ID(); !ok {
		v := queuemessage.DefaultID()
		qmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qmc *QueueMessageCreate) check() error {
	if _, ok := qmc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "QueueMessage.body"`)}
	}
	if _, ok := qmc.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`ent: missing required field "QueueMessage.content_type"`)}
	}
	if _, ok := qmc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "QueueMessage.status"`)}
	}
	if _, ok := qmc.mutation.MaxRetries(); !ok {
		return &ValidationError{Name: "max_retries", err: errors.New(`ent: missing required field "QueueMessage.max_retries"`)}
	}
	if _, ok := qmc.mutation.AvailableFrom(); !ok {
		return &ValidationError{Name: "available_from", err: errors.New(`ent: missing required field "QueueMessage.available_from"`)}
	}
	if _, ok := qmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "QueueMessage.created_at"`)}
	}
	return nil
}

func (qmc *QueueMessageCreate) sqlSave(ctx context.Context) (*QueueMessage, error) {
	_node, _spec := qmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (qmc *QueueMessageCreate) createSpec() (*QueueMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &QueueMessage{config: qmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: queuemessage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: queuemessage.FieldID,
			},
		}
	)
	if id, ok := qmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := qmc.mutation.Body(); ok {
		_spec.SetField(queuemessage.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := qmc.mutation.ContentType(); ok {
		_spec.SetField(queuemessage.FieldContentType, field.TypeString, value)
		_node.ContentType = value
	}
	if value, ok := qmc.mutation.Status(); ok {
		_spec.SetField(queuemessage.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := qmc.mutation.MaxRetries(); ok {
		_spec.SetField(queuemessage.FieldMaxRetries, field.TypeUint, value)
		_node.MaxRetries = value
	}
	if value, ok := qmc.mutation.AvailableFrom(); ok {
		_spec.SetField(queuemessage.FieldAvailableFrom, field.TypeTime, value)
		_node.AvailableFrom = value
	}
	if value, ok := qmc.mutation.CreatedAt(); ok {
		_spec.SetField(queuemessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := qmc.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queuemessage.QueueTable,
			Columns: queuemessage.QueuePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QueueMessageCreateBulk is the builder for creating many QueueMessage entities in bulk.
type QueueMessageCreateBulk struct {
	config
	builders []*QueueMessageCreate
}

// Save creates the QueueMessage entities in the database.
func (qmcb *QueueMessageCreateBulk) Save(ctx context.Context) ([]*QueueMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(qmcb.builders))
	nodes := make([]*QueueMessage, len(qmcb.builders))
	mutators := make([]Mutator, len(qmcb.builders))
	for i := range qmcb.builders {
		func(i int, root context.Context) {
			builder := qmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QueueMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qmcb *QueueMessageCreateBulk) SaveX(ctx context.Context) []*QueueMessage {
	v, err := qmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qmcb *QueueMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := qmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qmcb *QueueMessageCreateBulk) ExecX(ctx context.Context) {
	if err := qmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
