// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_models/ent/queuemessage"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// QueueMessage is the model entity for the QueueMessage schema.
type QueueMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// ContentType holds the value of the "content_type" field.
	ContentType string `json:"content_type,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// MaxRetries holds the value of the "max_retries" field.
	MaxRetries uint `json:"max_retries,omitempty"`
	// AvailableFrom holds the value of the "available_from" field.
	AvailableFrom time.Time `json:"available_from,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QueueMessageQuery when eager-loading is set.
	Edges QueueMessageEdges `json:"edges"`
}

// QueueMessageEdges holds the relations/edges for other nodes in the graph.
type QueueMessageEdges struct {
	// Queue holds the value of the queue edge.
	Queue []*Queue `json:"queue,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QueueOrErr returns the Queue value or an error if the edge
// was not loaded in eager-loading.
func (e QueueMessageEdges) QueueOrErr() ([]*Queue, error) {
	if e.loadedTypes[0] {
		return e.Queue, nil
	}
	return nil, &NotLoadedError{edge: "queue"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QueueMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case queuemessage.FieldMaxRetries:
			values[i] = new(sql.NullInt64)
		case queuemessage.FieldBody, queuemessage.FieldContentType, queuemessage.FieldStatus:
			values[i] = new(sql.NullString)
		case queuemessage.FieldAvailableFrom, queuemessage.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case queuemessage.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type QueueMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QueueMessage fields.
func (qm *QueueMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case queuemessage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				qm.ID = *value
			}
		case queuemessage.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				qm.Body = value.String
			}
		case queuemessage.FieldContentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_type", values[i])
			} else if value.Valid {
				qm.ContentType = value.String
			}
		case queuemessage.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				qm.Status = value.String
			}
		case queuemessage.FieldMaxRetries:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_retries", values[i])
			} else if value.Valid {
				qm.MaxRetries = uint(value.Int64)
			}
		case queuemessage.FieldAvailableFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field available_from", values[i])
			} else if value.Valid {
				qm.AvailableFrom = value.Time
			}
		case queuemessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				qm.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryQueue queries the "queue" edge of the QueueMessage entity.
func (qm *QueueMessage) QueryQueue() *QueueQuery {
	return (&QueueMessageClient{config: qm.config}).QueryQueue(qm)
}

// Update returns a builder for updating this QueueMessage.
// Note that you need to call QueueMessage.Unwrap() before calling this method if this QueueMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (qm *QueueMessage) Update() *QueueMessageUpdateOne {
	return (&QueueMessageClient{config: qm.config}).UpdateOne(qm)
}

// Unwrap unwraps the QueueMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qm *QueueMessage) Unwrap() *QueueMessage {
	_tx, ok := qm.config.driver.(*txDriver)
	if !ok {
		panic("ent: QueueMessage is not a transactional entity")
	}
	qm.config.driver = _tx.drv
	return qm
}

// String implements the fmt.Stringer.
func (qm *QueueMessage) String() string {
	var builder strings.Builder
	builder.WriteString("QueueMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qm.ID))
	builder.WriteString("body=")
	builder.WriteString(qm.Body)
	builder.WriteString(", ")
	builder.WriteString("content_type=")
	builder.WriteString(qm.ContentType)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(qm.Status)
	builder.WriteString(", ")
	builder.WriteString("max_retries=")
	builder.WriteString(fmt.Sprintf("%v", qm.MaxRetries))
	builder.WriteString(", ")
	builder.WriteString("available_from=")
	builder.WriteString(qm.AvailableFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(qm.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// QueueMessages is a parsable slice of QueueMessage.
type QueueMessages []*QueueMessage

func (qm QueueMessages) config(cfg config) {
	for _i := range qm {
		qm[_i].config = cfg
	}
}
