// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_models/ent/predicate"
	"_models/ent/queue"
	"_models/ent/queuemessage"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QueueMessageUpdate is the builder for updating QueueMessage entities.
type QueueMessageUpdate struct {
	config
	hooks    []Hook
	mutation *QueueMessageMutation
}

// Where appends a list predicates to the QueueMessageUpdate builder.
func (qmu *QueueMessageUpdate) Where(ps ...predicate.QueueMessage) *QueueMessageUpdate {
	qmu.mutation.Where(ps...)
	return qmu
}

// SetBody sets the "body" field.
func (qmu *QueueMessageUpdate) SetBody(s string) *QueueMessageUpdate {
	qmu.mutation.SetBody(s)
	return qmu
}

// SetContentType sets the "content_type" field.
func (qmu *QueueMessageUpdate) SetContentType(s string) *QueueMessageUpdate {
	qmu.mutation.SetContentType(s)
	return qmu
}

// SetStatus sets the "status" field.
func (qmu *QueueMessageUpdate) SetStatus(s string) *QueueMessageUpdate {
	qmu.mutation.SetStatus(s)
	return qmu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (qmu *QueueMessageUpdate) SetNillableStatus(s *string) *QueueMessageUpdate {
	if s != nil {
		qmu.SetStatus(*s)
	}
	return qmu
}

// SetMaxRetries sets the "max_retries" field.
func (qmu *QueueMessageUpdate) SetMaxRetries(u uint) *QueueMessageUpdate {
	qmu.mutation.ResetMaxRetries()
	qmu.mutation.SetMaxRetries(u)
	return qmu
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (qmu *QueueMessageUpdate) SetNillableMaxRetries(u *uint) *QueueMessageUpdate {
	if u != nil {
		qmu.SetMaxRetries(*u)
	}
	return qmu
}

// AddMaxRetries adds u to the "max_retries" field.
func (qmu *QueueMessageUpdate) AddMaxRetries(u int) *QueueMessageUpdate {
	qmu.mutation.AddMaxRetries(u)
	return qmu
}

// SetAvailableFrom sets the "available_from" field.
func (qmu *QueueMessageUpdate) SetAvailableFrom(t time.Time) *QueueMessageUpdate {
	qmu.mutation.SetAvailableFrom(t)
	return qmu
}

// SetNillableAvailableFrom sets the "available_from" field if the given value is not nil.
func (qmu *QueueMessageUpdate) SetNillableAvailableFrom(t *time.Time) *QueueMessageUpdate {
	if t != nil {
		qmu.SetAvailableFrom(*t)
	}
	return qmu
}

// SetCreatedAt sets the "created_at" field.
func (qmu *QueueMessageUpdate) SetCreatedAt(t time.Time) *QueueMessageUpdate {
	qmu.mutation.SetCreatedAt(t)
	return qmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qmu *QueueMessageUpdate) SetNillableCreatedAt(t *time.Time) *QueueMessageUpdate {
	if t != nil {
		qmu.SetCreatedAt(*t)
	}
	return qmu
}

// AddQueueIDs adds the "queue" edge to the Queue entity by IDs.
func (qmu *QueueMessageUpdate) AddQueueIDs(ids ...uuid.UUID) *QueueMessageUpdate {
	qmu.mutation.AddQueueIDs(ids...)
	return qmu
}

// AddQueue adds the "queue" edges to the Queue entity.
func (qmu *QueueMessageUpdate) AddQueue(q ...*Queue) *QueueMessageUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qmu.AddQueueIDs(ids...)
}

// Mutation returns the QueueMessageMutation object of the builder.
func (qmu *QueueMessageUpdate) Mutation() *QueueMessageMutation {
	return qmu.mutation
}

// ClearQueue clears all "queue" edges to the Queue entity.
func (qmu *QueueMessageUpdate) ClearQueue() *QueueMessageUpdate {
	qmu.mutation.ClearQueue()
	return qmu
}

// RemoveQueueIDs removes the "queue" edge to Queue entities by IDs.
func (qmu *QueueMessageUpdate) RemoveQueueIDs(ids ...uuid.UUID) *QueueMessageUpdate {
	qmu.mutation.RemoveQueueIDs(ids...)
	return qmu
}

// RemoveQueue removes "queue" edges to Queue entities.
func (qmu *QueueMessageUpdate) RemoveQueue(q ...*Queue) *QueueMessageUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qmu.RemoveQueueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qmu *QueueMessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(qmu.hooks) == 0 {
		affected, err = qmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QueueMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			qmu.mutation = mutation
			affected, err = qmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(qmu.hooks) - 1; i >= 0; i-- {
			if qmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (qmu *QueueMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := qmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qmu *QueueMessageUpdate) Exec(ctx context.Context) error {
	_, err := qmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qmu *QueueMessageUpdate) ExecX(ctx context.Context) {
	if err := qmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qmu *QueueMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   queuemessage.Table,
			Columns: queuemessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: queuemessage.FieldID,
			},
		},
	}
	if ps := qmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qmu.mutation.Body(); ok {
		_spec.SetField(queuemessage.FieldBody, field.TypeString, value)
	}
	if value, ok := qmu.mutation.ContentType(); ok {
		_spec.SetField(queuemessage.FieldContentType, field.TypeString, value)
	}
	if value, ok := qmu.mutation.Status(); ok {
		_spec.SetField(queuemessage.FieldStatus, field.TypeString, value)
	}
	if value, ok := qmu.mutation.MaxRetries(); ok {
		_spec.SetField(queuemessage.FieldMaxRetries, field.TypeUint, value)
	}
	if value, ok := qmu.mutation.AddedMaxRetries(); ok {
		_spec.AddField(queuemessage.FieldMaxRetries, field.TypeUint, value)
	}
	if value, ok := qmu.mutation.AvailableFrom(); ok {
		_spec.SetField(queuemessage.FieldAvailableFrom, field.TypeTime, value)
	}
	if value, ok := qmu.mutation.CreatedAt(); ok {
		_spec.SetField(queuemessage.FieldCreatedAt, field.TypeTime, value)
	}
	if qmu.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queuemessage.QueueTable,
			Columns: queuemessage.QueuePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: queue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qmu.mutation.RemovedQueueIDs(); len(nodes) > 0 && !qmu.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queuemessage.QueueTable,
			Columns: queuemessage.QueuePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qmu.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queuemessage.QueueTable,
			Columns: queuemessage.QueuePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queuemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// QueueMessageUpdateOne is the builder for updating a single QueueMessage entity.
type QueueMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QueueMessageMutation
}

// SetBody sets the "body" field.
func (qmuo *QueueMessageUpdateOne) SetBody(s string) *QueueMessageUpdateOne {
	qmuo.mutation.SetBody(s)
	return qmuo
}

// SetContentType sets the "content_type" field.
func (qmuo *QueueMessageUpdateOne) SetContentType(s string) *QueueMessageUpdateOne {
	qmuo.mutation.SetContentType(s)
	return qmuo
}

// SetStatus sets the "status" field.
func (qmuo *QueueMessageUpdateOne) SetStatus(s string) *QueueMessageUpdateOne {
	qmuo.mutation.SetStatus(s)
	return qmuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (qmuo *QueueMessageUpdateOne) SetNillableStatus(s *string) *QueueMessageUpdateOne {
	if s != nil {
		qmuo.SetStatus(*s)
	}
	return qmuo
}

// SetMaxRetries sets the "max_retries" field.
func (qmuo *QueueMessageUpdateOne) SetMaxRetries(u uint) *QueueMessageUpdateOne {
	qmuo.mutation.ResetMaxRetries()
	qmuo.mutation.SetMaxRetries(u)
	return qmuo
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (qmuo *QueueMessageUpdateOne) SetNillableMaxRetries(u *uint) *QueueMessageUpdateOne {
	if u != nil {
		qmuo.SetMaxRetries(*u)
	}
	return qmuo
}

// AddMaxRetries adds u to the "max_retries" field.
func (qmuo *QueueMessageUpdateOne) AddMaxRetries(u int) *QueueMessageUpdateOne {
	qmuo.mutation.AddMaxRetries(u)
	return qmuo
}

// SetAvailableFrom sets the "available_from" field.
func (qmuo *QueueMessageUpdateOne) SetAvailableFrom(t time.Time) *QueueMessageUpdateOne {
	qmuo.mutation.SetAvailableFrom(t)
	return qmuo
}

// SetNillableAvailableFrom sets the "available_from" field if the given value is not nil.
func (qmuo *QueueMessageUpdateOne) SetNillableAvailableFrom(t *time.Time) *QueueMessageUpdateOne {
	if t != nil {
		qmuo.SetAvailableFrom(*t)
	}
	return qmuo
}

// SetCreatedAt sets the "created_at" field.
func (qmuo *QueueMessageUpdateOne) SetCreatedAt(t time.Time) *QueueMessageUpdateOne {
	qmuo.mutation.SetCreatedAt(t)
	return qmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qmuo *QueueMessageUpdateOne) SetNillableCreatedAt(t *time.Time) *QueueMessageUpdateOne {
	if t != nil {
		qmuo.SetCreatedAt(*t)
	}
	return qmuo
}

// AddQueueIDs adds the "queue" edge to the Queue entity by IDs.
func (qmuo *QueueMessageUpdateOne) AddQueueIDs(ids ...uuid.UUID) *QueueMessageUpdateOne {
	qmuo.mutation.AddQueueIDs(ids...)
	return qmuo
}

// AddQueue adds the "queue" edges to the Queue entity.
func (qmuo *QueueMessageUpdateOne) AddQueue(q ...*Queue) *QueueMessageUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qmuo.AddQueueIDs(ids...)
}

// Mutation returns the QueueMessageMutation object of the builder.
func (qmuo *QueueMessageUpdateOne) Mutation() *QueueMessageMutation {
	return qmuo.mutation
}

// ClearQueue clears all "queue" edges to the Queue entity.
func (qmuo *QueueMessageUpdateOne) ClearQueue() *QueueMessageUpdateOne {
	qmuo.mutation.ClearQueue()
	return qmuo
}

// RemoveQueueIDs removes the "queue" edge to Queue entities by IDs.
func (qmuo *QueueMessageUpdateOne) RemoveQueueIDs(ids ...uuid.UUID) *QueueMessageUpdateOne {
	qmuo.mutation.RemoveQueueIDs(ids...)
	return qmuo
}

// RemoveQueue removes "queue" edges to Queue entities.
func (qmuo *QueueMessageUpdateOne) RemoveQueue(q ...*Queue) *QueueMessageUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qmuo.RemoveQueueIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qmuo *QueueMessageUpdateOne) Select(field string, fields ...string) *QueueMessageUpdateOne {
	qmuo.fields = append([]string{field}, fields...)
	return qmuo
}

// Save executes the query and returns the updated QueueMessage entity.
func (qmuo *QueueMessageUpdateOne) Save(ctx context.Context) (*QueueMessage, error) {
	var (
		err  error
		node *QueueMessage
	)
	if len(qmuo.hooks) == 0 {
		node, err = qmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QueueMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			qmuo.mutation = mutation
			node, err = qmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(qmuo.hooks) - 1; i >= 0; i-- {
			if qmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, qmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*QueueMessage)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from QueueMessageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (qmuo *QueueMessageUpdateOne) SaveX(ctx context.Context) *QueueMessage {
	node, err := qmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qmuo *QueueMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := qmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qmuo *QueueMessageUpdateOne) ExecX(ctx context.Context) {
	if err := qmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qmuo *QueueMessageUpdateOne) sqlSave(ctx context.Context) (_node *QueueMessage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   queuemessage.Table,
			Columns: queuemessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: queuemessage.FieldID,
			},
		},
	}
	id, ok := qmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QueueMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, queuemessage.FieldID)
		for _, f := range fields {
			if !queuemessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != queuemessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qmuo.mutation.Body(); ok {
		_spec.SetField(queuemessage.FieldBody, field.TypeString, value)
	}
	if value, ok := qmuo.mutation.ContentType(); ok {
		_spec.SetField(queuemessage.FieldContentType, field.TypeString, value)
	}
	if value, ok := qmuo.mutation.Status(); ok {
		_spec.SetField(queuemessage.FieldStatus, field.TypeString, value)
	}
	if value, ok := qmuo.mutation.MaxRetries(); ok {
		_spec.SetField(queuemessage.FieldMaxRetries, field.TypeUint, value)
	}
	if value, ok := qmuo.mutation.AddedMaxRetries(); ok {
		_spec.AddField(queuemessage.FieldMaxRetries, field.TypeUint, value)
	}
	if value, ok := qmuo.mutation.AvailableFrom(); ok {
		_spec.SetField(queuemessage.FieldAvailableFrom, field.TypeTime, value)
	}
	if value, ok := qmuo.mutation.CreatedAt(); ok {
		_spec.SetField(queuemessage.FieldCreatedAt, field.TypeTime, value)
	}
	if qmuo.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queuemessage.QueueTable,
			Columns: queuemessage.QueuePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: queue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qmuo.mutation.RemovedQueueIDs(); len(nodes) > 0 && !qmuo.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queuemessage.QueueTable,
			Columns: queuemessage.QueuePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qmuo.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queuemessage.QueueTable,
			Columns: queuemessage.QueuePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QueueMessage{config: qmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queuemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
